openapi: 3.0.0
info:
  title: API
  version: 1.0.0
paths:
  # CONNECTIONS
  /connections:
    get:
      summary: Get Connections
      description: Retrieve a list of connections for the user.
      tags:
        - Connections
      parameters:
        - name: filter
          in: query
          description: Filter by category (e.g., `all`, `web`, `uiux`, `dataScience`, `projectManagement`). Optional.
          required: false
          schema:
            type: string
        - name: levels
          in: query
          description: Filter users by visibility levels (1-4)
          required: false
          schema:
            type: integer
            example: 2
        - name: experience
          in: query
          description: Filter users by years of experience
          required: false
          schema:
            type: integer
            example: 5
        - name: city
          in: query
          description: Filter users by city
          required: false
          schema:
            type: string
            example: Pune
        - name: interest
          in: query
          description: Filter users by interest
          required: false
          schema:
            type: string
            example: AIML
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Connection'
      security:
        - bearerAuth: []

  /connections/{connection_Id}:
    get:
      summary: Get Connection Details
      description: Retrieve the details of a specific connection.
      tags:
        - Connections
      parameters:
        - name: connection_Id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
      security:
        - bearerAuth: []

  /connections/{connection_Id}/message:
    post:
      summary: Send Message to Connection
      description: Send a message to a connection.
      tags:
        - Connections
      parameters:
        - name: connection_Id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
      security:
        - bearerAuth: []

  /connectiondomains:
    get:
      summary: Get Available Connection Domains
      description: Retrieve a list of available connection domains for selection.
      tags:
        - Connections
      parameters:
        - name: search
          in: query
          description: Optional search query to filter connection domains by name.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Domain'
      security:
        - bearerAuth: []

  # DEEP CONNECTS
  /deepconnects/filters:
    get:
      summary: Retrieve available filter options for deep connects
      operationId: getFilterOptions
      tags:
        - Deep Connects
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterOptions'
      security:
        - bearerAuth: []

  /deepconnects:
    post:
      summary: Apply filters to get deep connects based on the selected criteria
      operationId: applyFilters
      tags:
        - Deep Connects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplyFiltersRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Connection'
      security:
        - bearerAuth: []

  /deepconnects/filters/advanced:
    get:
      summary: Retrieve available advanced filter options for deep connects
      operationId: getAdvancedFilterOptions
      tags:
        - Deep Connects
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedFilterOptions'
      security:
        - bearerAuth: []

  /deepconnects/advanced:
    post:
      summary: Apply advanced filters to get deep connects based on the selected criteria
      operationId: applyAdvancedFilters
      tags:
        - Deep Connects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplyAdvancedFiltersRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Connection'
      security:
        - bearerAuth: []

  # FILTERS
  /domains:
    get:
      summary: Get Available Domains
      description: Retrieve a list of available domains for selection.
      tags:
        - Filters
      parameters:
        - name: search
          in: query
          description: Optional search query to filter domains by name.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Domain'
      security:
        - bearerAuth: []

  /locations:
    get:
      summary: Get Available Locations
      description: Retrieve the list of available locations for selection.
      tags:
        - Filters
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationList'
      security:
        - bearerAuth: []
        
  /locations/search:
    get:
      summary: Search Locations
      description: Search for locations based on a query string.
      tags:
        - Filters
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationSearchResults'
      security:
        - bearerAuth: []

  /interests:
    get:
      summary: Get Available Interests
      description: Retrieve a list of available interests for selection.
      tags:
        - Filters
      parameters:
        - name: search
          in: query
          description: Optional search query to filter interests by name.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Interest'
      security:
        - bearerAuth: []
  
  /organizations:
    get:
      summary: Get Available Organizations
      description: Retrieve a list of available organizations for selection.
      tags:
        - Filters
      parameters:
        - name: search
          in: query
          schema:
            type: string
          description: Optional search query to filter organizations by name.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationList'
      security:
        - bearerAuth: []

  /messages:
    get:
      summary: Get Messages
      description: Retrieve a list of messages for the user.
      tags:
        - Messages
      parameters:
        - name: filter
          in: query
          description: Filter by message status (e.g., all, unread, read). Optional.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageList'
      security:
        - bearerAuth: []

  /messages/{message_Id}:
    get:
      summary: Get Message Details
      description: Retrieve the details of a specific message.
      tags:
        - Messages
      parameters:
        - name: message_Id
          in: path
          required: true
          schema:
            type: string
          example: msg1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageDetail'
      security:
        - bearerAuth: []
  
    put:
      summary: Update Message Status
      description: Update the status of a message (mark as read).
      tags:
        - Messages
      parameters:
        - name: message_Id
          in: path
          required: true
          schema:
            type: string
          example: msg1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMessageStatusRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateMessageStatusResponse'
      security:
        - bearerAuth: []

  /users/{user_Id}/bio:
    put:
      summary: Update Bio
      description: Update the professional details of a user's profile.
      tags:
        - My Profile
      parameters:
        - name: user_Id
          in: path
          required: true
          schema:
            type: string
          example: "12345"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBioRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateBioResponse'
      security:
        - bearerAuth: []
        
  /users/{user_Id}/name_location:
    put:
      summary: Update Name, Title, and Location
      description: Update the user's name, title, and location details.
      tags:
        - My Profile
      parameters:
        - name: user_Id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNameLocationRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateNameLocationResponse'
      security:
        - bearerAuth: []
  
  /users/{user_Id}/interests:
    put:
      summary: Update Interests
      description: Update the interests of a user's profile.
      tags:
        - My Profile
      parameters:
        - name: user_Id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInterestsRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateInterestsResponse'
      security:
        - bearerAuth: []
  
    get:
      summary: Get User Interests
      description: Retrieve the list of interests for a user.
      tags:
        - Profiles
      parameters:
        - name: user_Id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInterests'
      security:
        - bearerAuth: []

  /users/{userId}/profile-picture:
    get:
      summary: Get User Profile Picture
      description: Retrieve the profile picture of a specific user by userId.
      tags:
        - Profiles
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved user profile picture.
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
        '404':
          description: User not found or no profile picture available.
  
    put:
      summary: Update User Profile Picture
      description: Update the profile picture of a specific user by userId.
      tags:
        - My Profile
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Successfully updated user profile picture.
        '400':
          description: Bad Request - Invalid input or unsupported file format.
        '404':
          description: User not found.
  
  /users/{user_Id}/skills:
    get:
      summary: Get User Skills
      description: Retrieve the list of skills for a user.
      tags:
        - Profiles
      parameters:
        - name: user_Id
          in: path
          required: true
          schema:
            type: string
          example: 12345
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  skills:
                    type: array
                    items:
                      type: string
                      example: React
      security:
        - bearerAuth: []
  
    post:
      summary: Add a Skill
      description: Add a new skill to the user's profile.
      tags:
        - My Profile
      parameters:
        - name: user_Id
          in: path
          required: true
          schema:
            type: string
          example: 12345
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                skill:
                  type: string
                  example: New Skill
              required:
                - skill
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Skill added successfully.
      security:
        - bearerAuth: []

  # /users/{user_Id}/experience/:
  #   post:
  #     summary: Add Experience
  #     description: Add a new experience to a user's profile.
  #     tags:
  #       - My Profile
  #     parameters:
  #       - name: user_Id
  #         in: path
  #         required: true
  #         schema:
  #           type: string
  #         example: 12345
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               company:
  #                 type: string
  #                 example: New Company
  #               role:
  #                 type: string
  #                 example: New Role
  #               startDate:
  #                 type: string
  #                 format: date
  #                 example: 2024-01-15
  #               endDate:
  #                 type: string
  #                 format: date
  #                 example: 2024-07-15
  #             required:
  #               - company
  #               - role
  #               - startDate
  #               - endDate
  #     responses:
  #       '201':
  #         description: Created
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 message:
  #                   type: string
  #                   example: Experience added successfully.
  #       '400':
  #         description: Bad Request
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 message:
  #                   type: string
  #                   example: Invalid request payload.
  #     security:
  #       - bearerAuth: []
  /users/{user_Id}/experience/:
    post:
      summary: Add Experience
      description: Add a new experience to a user's profile.
      tags:
        - My Profile
      parameters:
        - name: user_Id
          in: path
          required: true
          schema:
            type: string
          example: 12345
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Experience'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperienceResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

  /users/{user_Id}/education:
    post:
      summary: Add Education
      description: Submit multiple educational qualifications.
      tags:
        - My Profile
      parameters:
        - name: user_Id
          in: path
          required: true
          schema:
            type: string
          example: 12345
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EducationRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      security:
        - bearerAuth: []
  
    get:
      summary: Get User Education
      description: Retrieve the education details of a specific user by userId.
      tags:
        - Profiles
      parameters:
        - name: user_Id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved user education details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEducation'
        '404':
          description: User not found.

  /users/{user_Id}/domains:
    post:
      summary: Select Domains
      description: Submit the selected domains for a user.
      tags:
        - My Profile
      parameters:
        - name: user_Id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainSelectionRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      security:
        - bearerAuth: []

  /users/{user_Id}:
    get:
      summary: Get User Profile
      description: Retrieve the details of a user's profile.
      tags:
        - Profiles
      parameters:
        - name: user_Id
          in: path
          required: true
          schema:
            type: string
            example: 12345
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
      security:
        - bearerAuth: []
        
  /users/{user_Id}/znp:
    get:
      summary: Get User ZNP Data
      description: Retrieve the user's ZNP (Zero Notification Principle) data for YouTube and Books.
      tags:
        - Profiles
      parameters:
        - name: user_Id
          in: path
          required: true
          schema:
            type: string
            example: 12345
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserZNP'
      security:
        - bearerAuth: []

  /users/{userId}/barters:
    get:
      summary: Get User Barters
      description: Retrieve the barters of a specific user by userId.
      tags:
        - Barters
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved user barters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBarters'
        '404':
          description: User not found or no barters available.
  
    put:
      summary: Update User Barters
      description: Update the barters of a specific user by userId.
      tags:
        - Barters
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserBarters'
      responses:
        '200':
          description: Successfully updated user barters.
        '400':
          description: Bad Request - Invalid input.
        '404':
          description: User not found.

  /users/{userId}/barters/add:
    post:
      summary: Add Barter Item
      description: Add a new barter item for a specific user by userId.
      tags:
        - Barters
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBarterItem'
      responses:
        '201':
          description: Successfully added barter item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BarterItemResponse'
        '400':
          description: Bad Request - Invalid input.
        '404':
          description: User not found.
          
  /users/{userId}/barters/suggestions:
    get:
      summary: Get Barter Suggestions
      description: Retrieve the barter suggestions for a specific user by userId.
      tags:
        - Barters
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved barter suggestions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BarterSuggestions'
        '404':
          description: User not found or no suggestions available.
  
    put:
      summary: Update Barter Suggestions
      description: Update the barter suggestions for a specific user by userId.
      tags:
        - Barters
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BarterSuggestions'
      responses:
        '200':
          description: Successfully updated barter suggestions.
        '400':
          description: Bad Request - Invalid input.
        '404':
          description: User not found.

  /requests:
    get:
      summary: Get Requests
      description: Retrieve a list of requests.
      tags:
        - Requests
      parameters:
        - name: filter
          in: query
          schema:
            type: string
          description: Filter by category (e.g., tier, requestType, compatibility).
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Requests'
      security:
        - bearerAuth: []
  
  /requests/{request_Id}:
    get:
      summary: Get Request Details
      description: Retrieve the details of a specific request.
      tags:
        - Requests
      parameters:
        - name: request_Id
          in: path
          required: true
          schema:
            type: string
          example: req1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestDetails'
      security:
        - bearerAuth: []
  
    put:
      summary: Update Request Status
      description: Update the status of a request (accept or reject).
      tags:
        - Requests
      parameters:
        - name: request_Id
          in: path
          required: true
          schema:
            type: string
          example: req1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRequestStatus'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Request status updated successfully."
      security:
        - bearerAuth: []

  /users/{user_Id}/visibility-settings:
    put:
      summary: Update visibility settings for user data
      description: Allows the user to update the visibility settings for their YouTube suggestions, book suggestions, LinkedIn connections, and other data.
      tags: 
        - Configuration
      parameters:
        - name: user_Id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                youtubeZNP:
                  type: integer
                  description: Visibility level for YouTube ZNP (1-4)
                  example: 2
                youtubeSuggestions:
                  type: integer
                  description: Visibility level for YouTube suggestions (1-4)
                  example: 2
                bookZNP:
                  type: integer
                  description: Visibility level for book ZNP (1-4)
                  example: 1
                bookSuggestions:
                  type: integer
                  description: Visibility level for book suggestions (1-4)
                  example: 2
                linkedinConnects:
                  type: integer
                  description: Visibility level for LinkedIn connections (1-4)
                  example: 3
                linkedinZNP:
                  type: integer
                  description: Visibility level for LinkedIn ZNP (1-4)
                  example: 2
                linkedinProfile:
                  type: integer
                  description: Visibility level for LinkedIn Profile (1-4)
                  example: 2
                pyscometricZNP:
                  type: integer
                  description: Visibility level for Psychometric ZNP (1-4)
                  example: 2
      responses:
        '200':
          description: Visibility settings updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Visibility settings updated successfully.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid visibility level.

  /signup:
    post:
      summary: User Sign Up
      description: Register a new user.
      tags:
        - Login and Signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: jayati
                email:
                  type: string
                  format: email
                  example: jayati1234@xyz.com
                password:
                  type: string
                  example: 010101
              required:
                - username
                - email
                - password
      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: id1
                  username:
                    type: string
                    example: jayati
                  email:
                    type: string
                    example: jayati1234@xyz.com
        '400':
          description: Bad Request - Invalid input.
        '409':
          description: Conflict - User already exists.

  /login:
    post:
      summary: User Login
      description: Authenticate a user and return a token.
      tags:
        - Login and Signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: jayati1234@xyz.com
                password:
                  type: string
                  example: 010101
              required:
                - email
                - password
      responses:
        '200':
          description: Successful authentication.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for accessing protected resources.
        '400':
          description: Bad Request - Invalid input.
        '401':
          description: Unauthorized - Invalid email or password.





components:
  schemas:
    Connection:
      type: object
      properties:
        id:
          type: string
          example: conn1
        name:
          type: string
          example: Satyam
        role:
          type: string
          example: UI/UX designer
        location:
          type: string
          example: Pune, MH
        age:
          type: string
          example: 45 Yrs
        skills:
          type: array
          items:
            type: string
          example: ["React JS", "Java"]
        level:
          type: integer
          example: 3
        profileImage:
          type: string
          example: url_to_image
    FilterOptions:
      type: object
      properties:
        locations:
          type: array
          items:
            type: string
          example: ["Pune, MH", "Hyderabad, TL"]
        purposes:
          type: array
          items:
            type: string
          example: ["Internship", "Mentee", "Job"]
        domains:
          type: array
          items:
            type: string
          example: ["Software Developer", "UI/UX Designer"]
        experiences:
          type: array
          items:
            type: string
          example: ["6-10 yrs", "10+ yrs", "20+ yrs"]
        educationLevels:
          type: array
          items:
            type: string
          example: ["Bachelor's Degree", "Master's Degree", "PhD"]
    ApplyFiltersRequest:
      type: object
      properties:
        location:
          type: array
          items:
            type: string
          example: ["Pune, MH", "Hyderabad, TL"]
        purpose:
          type: array
          items:
            type: string
          example: ["Internship", "Mentee", "Job"]
        domain:
          type: array
          items:
            type: string
          example: ["Software Developer", "UI/UX Designer"]
        experience:
          type: array
          items:
            type: string
          example: ["6-10 yrs", "10+ yrs", "20+ yrs"]
        education:
          type: array
          items:
            type: string
          example: ["Bachelor's Degree", "Master's Degree", "PhD"]
    AdvancedFilterOptions:
      type: object
      properties:
        browsesSimilarContent:
          type: object
          properties:
            min:
              type: integer
              example: 0
            max:
              type: integer
              example: 10
        psychometricCompatibility:
          type: object
          properties:
            min:
              type: integer
              example: 0
            max:
              type: integer
              example: 10
        hasConnectsIn:
          type: array
          items:
            type: string
          example: ["Location1", "Location2", "Location3"]
        tiers:
          type: array
          items:
            type: string
          example: ["Tier 1", "Tier 2", "Tier 3"]
        titles:
          type: array
          items:
            type: string
          example: ["Title 1", "Title 2", "Title 3"]
        organizations:
          type: array
          items:
            type: string
          example: ["Org 1", "Org 2", "Org 3"]
        interests:
          type: array
          items:
            type: string
          example: ["Interest 1", "Interest 2", "Interest 3"]
        skills:
          type: array
          items:
            type: string
          example: ["Skill 1", "Skill 2", "Skill 3"]
    ApplyAdvancedFiltersRequest:
      type: object
      properties:
        browsesSimilarContent:
          type: integer
          example: 7
        psychometricCompatibility:
          type: integer
          example: 8
        hasConnectsIn:
          type: array
          items:
            type: string
          example: ["Location1", "Location2"]
        tier:
          type: string
          example: "Tier 2"
        title:
          type: string
          example: "Title 1"
        organization:
          type: string
          example: "Org 1"
        interest:
          type: string
          example: "Interest 1"
        skills:
          type: array
          items:
            type: string
          example: ["Skill 1", "Skill 2"]
    Domain:
      type: object
      properties:
        id:
          type: string
          example: dom1
        name:
          type: string
          example: Software Developer
    LocationList:
      type: object
      properties:
        locations:
          type: array
          items:
            type: string
            example: "Pune, MH"
    LocationSearchResults:
      type: object
      properties:
        locations:
          type: array
          items:
            type: string
            example: "Delhi, DL"
    Interest:
      type: object
      properties:
        id:
          type: string
          example: int1
        name:
          type: string
          example: Artificial Intelligence
    OrganizationList:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            example: org1
          name:
            type: string
            example: Capgemini
    MessageList:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            example: msg1
          sender:
            type: object
            properties:
              name:
                type: string
                example: Dev Patel
              profileImage:
                type: string
                example: url_to_image
              level:
                type: integer
                example: 2
          snippet:
            type: string
            example: What about that new jacket if I...
          timestamp:
            type: string
            format: date-time
            example: 2024-07-09T09:18:00Z
          status:
            type: string
            example: unread
    MessageDetail:
      type: object
      properties:
        id:
          type: string
          example: msg1
        sender:
          type: object
          properties:
            name:
              type: string
              example: Dev Patel
            profileImage:
              type: string
              example: url_to_image
            level:
              type: integer
              example: 2
        content:
          type: string
          example: What about that new jacket if I buy it online?
        timestamp:
          type: string
          format: date-time
          example: 2024-07-09T09:18:00Z
        status:
          type: string
          example: unread
    UpdateMessageStatusRequest:
      type: object
      properties:
        status:
          type: string
          example: read
      required:
        - status
    UpdateMessageStatusResponse:
      type: object
      properties:
        message:
          type: string
          example: Message status updated successfully.
    UpdateBioRequest:
      type: object
      properties:
        bio:
          type: string
          example: "Alex Johnson is a passionate and innovative UI/UX Designer with over seven years of experience in creating user-centered designs for web and mobile applications. Alex specializes in designing..."
    UpdateBioResponse:
      type: object
      properties:
        message:
          type: string
          example: "Professional profile updated successfully."
    UpdateNameLocationRequest:
      type: object
      properties:
        name:
          type: string
          example: "Jayati Wajire"
        age:
          type: integer
          example: 21
        role:
          type: string
          example: "Backend Lead"
        locations:
          type: array
          items:
            type: string
          example: ["Pune, MH"]
    UpdateNameLocationResponse:
      type: object
      properties:
        message:
          type: string
          example: "Locations updated successfully."
    UpdateInterestsRequest:
      type: object
      properties:
        interests:
          type: string
          example: "Web Development, AI/ML, Blockchain, Cricket, Share Market"
      required:
        - interests
    UpdateInterestsResponse:
      type: object
      properties:
        message:
          type: string
          example: "Interests updated successfully."
    UserInterests:
      type: object
      properties:
        interests:
          type: array
          items:
            type: string
          example: ["AIML", "Web Development", "Blockchain"]
    Experience:
      type: object
      properties:
        company:
          type: string
          example: New Company
        role:
          type: string
          example: New Role
        startDate:
          type: string
          format: date
          example: 2024-01-15
        endDate:
          type: string
          format: date
          example: 2024-07-15
      required:
        - company
        - role
        - startDate
        - endDate
    ExperienceResponse:
      type: object
      properties:
        message:
          type: string
          example: Experience added successfully.
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: Invalid request payload.
    EducationRequest:
      type: object
      properties:
        education:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: edu1
              name:
                type: string
                example: HSC
          example: 
            - id: edu1
              name: HSC
      required:
        - education
    UserEducation:
      type: object
      properties:
        school:
          type: string
          example: XYZ High School
        college:
          type: string
          example: ABC University
    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: Education details updated successfully.
    DomainSelectionRequest:
      type: object
      properties:
        domains:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: dom1
              name:
                type: string
                example: Software Developer
      required:
        - domains
    UserProfile:
      type: object
      properties:
        id:
          type: string
          example: "12345"
        name:
          type: string
          example: "Ajay"
        role:
          type: string
          example: "UI/UX designer"
        location:
          type: string
          example: "Pune"
        profileImage:
          type: string
          example: "url_to_image"
        bio:
          type: string
          example: "Alex Johnson is a passionate and innovative UI/UX Designer..."
        interests:
          type: array
          items:
            type: string
            example: "AIML"
        youtubeZNP:
          type: object
          additionalProperties:
            type: string
            example: "24 hrs"
        booksZNP:
          type: object
          additionalProperties:
            type: string
            example: "24 hrs"
    UserZNP:
      type: object
      properties:
        youtubeZNP:
          type: object
          additionalProperties:
            type: string
            example: "24 hrs"
        booksZNP:
          type: object
          additionalProperties:
            type: string
            example: "24 hrs"
    UserBarters:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
          description:
            type: string
          market_value:
            type: number
            format: float
          visibility:
            type: integer
            enum:
              - 1
              - 2
              - 3
        required:
          - name
          - description
          - market_value
          - visibility
    NewBarterItem:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        market_value:
          type: number
          format: float
        visibility:
          type: integer
          enum: [1, 2, 3]
      required:
        - name
        - market_value
        - visibility
    BarterItemResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        market_value:
          type: number
          format: float
        visibility:
          type: integer
          enum: [1, 2, 3]
    BarterSuggestions:
      type: array
      items:
        type: object
        properties:
          subject:
            type: string
          description:
            type: string
        required:
          - subject
          - description
    Requests:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            example: "req1"
          name:
            type: string
            example: "Jayati Wajire"
          role:
            type: string
            example: "Backend Lead"
          location:
            type: string
            example: "Pune, MH"
          compatibility:
            type: string
            example: "90%"
          age:
            type: string
            example: "21 Yrs"
          skills:
            type: array
            items:
              type: string
              example: "REST API"
          status:
            type: string
            example: "pending"
          message:
            type: string
            example: "Hi! How are you?"
    RequestDetails:
      type: object
      properties:
        id:
          type: string
          example: "req1"
        name:
          type: string
          example: "Jayati Wajire"
        role:
          type: string
          example: "Backend Lead"
        location:
          type: string
          example: "Pune, MH"
        compatibility:
          type: string
          example: "90%"
        age:
          type: string
          example: "21 Yrs"
        skills:
          type: array
          items:
            type: string
            example: "REST API"
        status:
          type: string
          example: "pending"
        message:
          type: string
          example: "Hi! How are u ?"
    UpdateRequestStatus:
      type: object
      properties:
        status:
          type: string
          enum: ["accepted", "rejected"]
      required:
        - status

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
